     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; オブジェクトファイルを作るモード	
     5 00000000                                 [INSTRSET "i486p"]				; 486の命令まで使いたいという記述
     6 00000000                                 [BITS 32]						; 32ビットモード用の機械語を作らせる
     7 00000000                                 [FILE "naskfunc.nas"]			; ソースファイル名情報
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    15 00000000                                 		GLOBAL	_load_tr
    16 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21
    17 00000000                                 		GLOBAL	_asm_inthandler2c, _asm_inthandler0c
    18 00000000                                 		GLOBAL	_asm_inthandler0d, _asm_end_app
    19 00000000                                 		GLOBAL	_memtest_sub
    20 00000000                                 		GLOBAL	_farjmp, _farcall
    21 00000000                                 		GLOBAL	_asm_hrb_api, _start_app
    22 00000000                                 		GLOBAL  _asm_osselect_third
    23 00000000                                 		EXTERN	_inthandler20, _inthandler21
    24 00000000                                 		EXTERN	_inthandler2c, _inthandler0d
    25 00000000                                 		EXTERN	_inthandler0c
    26 00000000                                 		EXTERN	_hrb_api
    27 00000000                                 		GLOBAL  _clts, _fnsave, _frstor, _asm_inthandler07
    28 00000000                                 		EXTERN  _inthandler07
    29 00000000                                 
    30 00000000                                 
    31 00000000                                 
    32                                          [SECTION .text]
    33 00000000                                 
    34 00000000                                 _asm_osselect_third:   ; void asm_osselect_third(int esp);
    35 00000000 66 8C D0                                MOV     AX,SS           ; SSには8が入っているのでそれを使う
    36 00000003 8E E0                                   MOV     FS,AX
    37 00000005 8E E8                                   MOV     GS,AX
    38 00000007 8B 64 24 04                             MOV     ESP,[ESP+4]
    39 0000000B EA 0000001B 0010                        JMP     2*8:0x0000001b
    40 00000012                                 
    41 00000012                                 _clts:          ; void clts(void);
    42 00000012 0F 06                                   CLTS
    43 00000014 C3                                      RET
    44 00000015                                 
    45 00000015                                 _fnsave:        ; void fnsave(int *addr);
    46 00000015 8B 44 24 04                             MOV     EAX,[ESP+4]     ; addr
    47 00000019 DD 30                                   FNSAVE  [EAX]
    48 0000001B C3                                      RET
    49 0000001C                                 
    50 0000001C                                 _frstor:        ; void frstor(int *addr);
    51 0000001C 8B 44 24 04                             MOV     EAX,[ESP+4]     ; addr
    52 00000020 DD 20                                   FRSTOR  [EAX]
    53 00000022 C3                                      RET
    54 00000023                                 
    55 00000023                                 _asm_inthandler07:
    56 00000023 FB                                      STI
    57 00000024 06                                      PUSH    ES
    58 00000025 1E                                      PUSH    DS
    59 00000026 60                                      PUSHAD
    60 00000027 89 E0                                   MOV     EAX,ESP
    61 00000029 50                                      PUSH    EAX
    62 0000002A 66 8C D0                                MOV     AX,SS
    63 0000002D 8E D8                                   MOV     DS,AX
    64 0000002F 8E C0                                   MOV     ES,AX
    65 00000031 E8 [00000000]                           CALL    _inthandler07
    66 00000036 83 F8 00                                CMP     EAX,0
    67 00000039 0F 85 00000178                          JNE     _asm_end_app
    68 0000003F 58                                      POP     EAX
    69 00000040 61                                      POPAD
    70 00000041 1F                                      POP     DS
    71 00000042 07                                      POP     ES
    72 00000043 CF                                      IRETD                   ; INT07では ESP += 4; はいらない
    73 00000044                                 
    74 00000044                                 _io_hlt:	; void io_hlt(void);
    75 00000044 F4                              		HLT
    76 00000045 C3                              		RET
    77 00000046                                 
    78 00000046                                 _io_cli:	; void io_cli(void);
    79 00000046 FA                              		CLI
    80 00000047 C3                              		RET
    81 00000048                                 
    82 00000048                                 _io_sti:	; void io_sti(void);
    83 00000048 FB                              		STI
    84 00000049 C3                              		RET
    85 0000004A                                 
    86 0000004A                                 _io_stihlt:	; void io_stihlt(void);
    87 0000004A FB                              		STI
    88 0000004B F4                              		HLT
    89 0000004C C3                              		RET
    90 0000004D                                 
    91 0000004D                                 _io_in8:	; int io_in8(int port);
    92 0000004D 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    93 00000051 B8 00000000                     		MOV		EAX,0
    94 00000056 EC                              		IN		AL,DX
    95 00000057 C3                              		RET
    96 00000058                                 
    97 00000058                                 _io_in16:	; int io_in16(int port);
    98 00000058 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    99 0000005C B8 00000000                     		MOV		EAX,0
   100 00000061 66 ED                           		IN		AX,DX
   101 00000063 C3                              		RET
   102 00000064                                 
   103 00000064                                 _io_in32:	; int io_in32(int port);
   104 00000064 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
   105 00000068 ED                              		IN		EAX,DX
   106 00000069 C3                              		RET
   107 0000006A                                 
   108 0000006A                                 _io_out8:	; void io_out8(int port, int data);
   109 0000006A 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
   110 0000006E 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
   111 00000072 EE                              		OUT		DX,AL
   112 00000073 C3                              		RET
   113 00000074                                 
   114 00000074                                 _io_out16:	; void io_out16(int port, int data);
   115 00000074 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
   116 00000078 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
   117 0000007C 66 EF                           		OUT		DX,AX
   118 0000007E C3                              		RET
   119 0000007F                                 
   120 0000007F                                 _io_out32:	; void io_out32(int port, int data);
   121 0000007F 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
   122 00000083 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
   123 00000087 EF                              		OUT		DX,EAX
   124 00000088 C3                              		RET
   125 00000089                                 
   126 00000089                                 _io_load_eflags:	; int io_load_eflags(void);
   127 00000089 9C                              		PUSHFD		; PUSH EFLAGS という意味
   128 0000008A 58                              		POP		EAX
   129 0000008B C3                              		RET
   130 0000008C                                 
   131 0000008C                                 _io_store_eflags:	; void io_store_eflags(int eflags);
   132 0000008C 8B 44 24 04                     		MOV		EAX,[ESP+4]
   133 00000090 50                              		PUSH	EAX
   134 00000091 9D                              		POPFD		; POP EFLAGS という意味
   135 00000092 C3                              		RET
   136 00000093                                 
   137 00000093                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
   138 00000093 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   139 00000098 66 89 44 24 06                  		MOV		[ESP+6],AX
   140 0000009D 0F 01 54 24 06                  		LGDT	[ESP+6]
   141 000000A2 C3                              		RET
   142 000000A3                                 
   143 000000A3                                 _load_idtr:		; void load_idtr(int limit, int addr);
   144 000000A3 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   145 000000A8 66 89 44 24 06                  		MOV		[ESP+6],AX
   146 000000AD 0F 01 5C 24 06                  		LIDT	[ESP+6]
   147 000000B2 C3                              		RET
   148 000000B3                                 
   149 000000B3                                 _load_cr0:		; int load_cr0(void);
   150 000000B3 0F 20 C0                        		MOV		EAX,CR0
   151 000000B6 C3                              		RET
   152 000000B7                                 
   153 000000B7                                 _store_cr0:		; void store_cr0(int cr0);
   154 000000B7 8B 44 24 04                     		MOV		EAX,[ESP+4]
   155 000000BB 0F 22 C0                        		MOV		CR0,EAX
   156 000000BE C3                              		RET
   157 000000BF                                 
   158 000000BF                                 _load_tr:		; void load_tr(int tr);
   159 000000BF 0F 00 5C 24 04                  		LTR		[ESP+4]			; tr
   160 000000C4 C3                              		RET
   161 000000C5                                 
   162 000000C5                                 _asm_inthandler20:
   163 000000C5 06                              		PUSH	ES
   164 000000C6 1E                              		PUSH	DS
   165 000000C7 60                              		PUSHAD
   166 000000C8 89 E0                           		MOV		EAX,ESP
   167 000000CA 50                              		PUSH	EAX
   168 000000CB 66 8C D0                        		MOV		AX,SS
   169 000000CE 8E D8                           		MOV		DS,AX
   170 000000D0 8E C0                           		MOV		ES,AX
   171 000000D2 E8 [00000000]                   		CALL	_inthandler20
   172 000000D7 58                              		POP		EAX
   173 000000D8 61                              		POPAD
   174 000000D9 1F                              		POP		DS
   175 000000DA 07                              		POP		ES
   176 000000DB CF                              		IRETD
   177 000000DC                                 
   178 000000DC                                 _asm_inthandler21:
   179 000000DC 06                              		PUSH	ES
   180 000000DD 1E                              		PUSH	DS
   181 000000DE 60                              		PUSHAD
   182 000000DF 89 E0                           		MOV		EAX,ESP
   183 000000E1 50                              		PUSH	EAX
   184 000000E2 66 8C D0                        		MOV		AX,SS
   185 000000E5 8E D8                           		MOV		DS,AX
   186 000000E7 8E C0                           		MOV		ES,AX
   187 000000E9 E8 [00000000]                   		CALL	_inthandler21
   188 000000EE 58                              		POP		EAX
   189 000000EF 61                              		POPAD
   190 000000F0 1F                              		POP		DS
   191 000000F1 07                              		POP		ES
   192 000000F2 CF                              		IRETD
   193 000000F3                                 
   194 000000F3                                 _asm_inthandler2c:
   195 000000F3 06                              		PUSH	ES
   196 000000F4 1E                              		PUSH	DS
   197 000000F5 60                              		PUSHAD
   198 000000F6 89 E0                           		MOV		EAX,ESP
   199 000000F8 50                              		PUSH	EAX
   200 000000F9 66 8C D0                        		MOV		AX,SS
   201 000000FC 8E D8                           		MOV		DS,AX
   202 000000FE 8E C0                           		MOV		ES,AX
   203 00000100 E8 [00000000]                   		CALL	_inthandler2c
   204 00000105 58                              		POP		EAX
   205 00000106 61                              		POPAD
   206 00000107 1F                              		POP		DS
   207 00000108 07                              		POP		ES
   208 00000109 CF                              		IRETD
   209 0000010A                                 
   210 0000010A                                 _asm_inthandler0c:
   211 0000010A FB                              		STI
   212 0000010B 06                              		PUSH	ES
   213 0000010C 1E                              		PUSH	DS
   214 0000010D 60                              		PUSHAD
   215 0000010E 89 E0                           		MOV		EAX,ESP
   216 00000110 50                              		PUSH	EAX
   217 00000111 66 8C D0                        		MOV		AX,SS
   218 00000114 8E D8                           		MOV		DS,AX
   219 00000116 8E C0                           		MOV		ES,AX
   220 00000118 E8 [00000000]                   		CALL	_inthandler0c
   221 0000011D 83 F8 00                        		CMP		EAX,0
   222 00000120 0F 85 00000091                  		JNE		_asm_end_app
   223 00000126 58                              		POP		EAX
   224 00000127 61                              		POPAD
   225 00000128 1F                              		POP		DS
   226 00000129 07                              		POP		ES
   227 0000012A 83 C4 04                        		ADD		ESP,4			; INT 0x0c でも、これが必要
   228 0000012D CF                              		IRETD
   229 0000012E                                 
   230 0000012E                                 _asm_inthandler0d:
   231 0000012E FB                              		STI
   232 0000012F 06                              		PUSH	ES
   233 00000130 1E                              		PUSH	DS
   234 00000131 60                              		PUSHAD
   235 00000132 89 E0                           		MOV		EAX,ESP
   236 00000134 50                              		PUSH	EAX
   237 00000135 66 8C D0                        		MOV		AX,SS
   238 00000138 8E D8                           		MOV		DS,AX
   239 0000013A 8E C0                           		MOV		ES,AX
   240 0000013C E8 [00000000]                   		CALL	_inthandler0d
   241 00000141 83 F8 00                        		CMP		EAX,0			; ここだけ違う
   242 00000144 75 71                           		JNE		_asm_end_app	; ここだけ違う
   243 00000146 58                              		POP		EAX
   244 00000147 61                              		POPAD
   245 00000148 1F                              		POP		DS
   246 00000149 07                              		POP		ES
   247 0000014A 83 C4 04                        		ADD		ESP,4			; INT 0x0d では、これが必要
   248 0000014D CF                              		IRETD
   249 0000014E                                 
   250 0000014E                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   251 0000014E 57                              		PUSH	EDI						; （EBX, ESI, EDI も使いたいので）
   252 0000014F 56                              		PUSH	ESI
   253 00000150 53                              		PUSH	EBX
   254 00000151 BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   255 00000156 BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   256 0000015B 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start;
   257 0000015F                                 mts_loop:
   258 0000015F 89 C3                           		MOV		EBX,EAX
   259 00000161 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   260 00000167 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   261 00000169 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   262 0000016B 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   263 0000016E 3B 3B                           		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   264 00000170 75 18                           		JNE		mts_fin
   265 00000172 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   266 00000175 3B 33                           		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   267 00000177 75 11                           		JNE		mts_fin
   268 00000179 89 13                           		MOV		[EBX],EDX				; *p = old;
   269 0000017B 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000;
   270 00000180 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   271 00000184 76 D9                           		JBE		mts_loop
   272 00000186 5B                              		POP		EBX
   273 00000187 5E                              		POP		ESI
   274 00000188 5F                              		POP		EDI
   275 00000189 C3                              		RET
   276 0000018A                                 mts_fin:
   277 0000018A 89 13                           		MOV		[EBX],EDX				; *p = old;
   278 0000018C 5B                              		POP		EBX
   279 0000018D 5E                              		POP		ESI
   280 0000018E 5F                              		POP		EDI
   281 0000018F C3                              		RET
   282 00000190                                 
   283 00000190                                 _farjmp:		; void farjmp(int eip, int cs);
   284 00000190 FF 6C 24 04                     		JMP		FAR	[ESP+4]				; eip, cs
   285 00000194 C3                              		RET
   286 00000195                                 
   287 00000195                                 _farcall:		; void farcall(int eip, int cs);
   288 00000195 FF 5C 24 04                     		CALL	FAR	[ESP+4]				; eip, cs
   289 00000199 C3                              		RET
   290 0000019A                                 
   291 0000019A                                 _asm_hrb_api:
   292 0000019A FB                              		STI
   293 0000019B 1E                              		PUSH	DS
   294 0000019C 06                              		PUSH	ES
   295 0000019D 60                              		PUSHAD		; 保存のためのPUSH
   296 0000019E 60                              		PUSHAD		; hrb_apiにわたすためのPUSH
   297 0000019F 66 8C D0                        		MOV		AX,SS
   298 000001A2 8E D8                           		MOV		DS,AX		; OS用のセグメントをDSとESにも入れる
   299 000001A4 8E C0                           		MOV		ES,AX
   300 000001A6 E8 [00000000]                   		CALL	_hrb_api
   301 000001AB 83 F8 00                        		CMP		EAX,0		; EAXが0でなければアプリ終了処理
   302 000001AE 75 07                           		JNE		_asm_end_app
   303 000001B0 83 C4 20                        		ADD		ESP,32
   304 000001B3 61                              		POPAD
   305 000001B4 07                              		POP		ES
   306 000001B5 1F                              		POP		DS
   307 000001B6 CF                              		IRETD
   308 000001B7                                 _asm_end_app:
   309 000001B7                                 ;	EAXはtss.esp0の番地
   310 000001B7 8B 20                           		MOV		ESP,[EAX]
   311 000001B9 C7 40 04 00000000               		MOV		DWORD [EAX+4],0
   312 000001C0 61                              		POPAD
   313 000001C1 C3                              		RET					; cmd_appへ帰る
   314 000001C2                                 
   315 000001C2                                 _start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);
   316 000001C2 60                              		PUSHAD		; 32ビットレジスタを全部保存しておく
   317 000001C3 8B 44 24 24                     		MOV		EAX,[ESP+36]	; アプリ用のEIP
   318 000001C7 8B 4C 24 28                     		MOV		ECX,[ESP+40]	; アプリ用のCS
   319 000001CB 8B 54 24 2C                     		MOV		EDX,[ESP+44]	; アプリ用のESP
   320 000001CF 8B 5C 24 30                     		MOV		EBX,[ESP+48]	; アプリ用のDS/SS
   321 000001D3 8B 6C 24 34                     		MOV		EBP,[ESP+52]	; tss.esp0の番地
   322 000001D7 89 65 00                        		MOV		[EBP  ],ESP		; OS用のESPを保存
   323 000001DA 8C 55 04                        		MOV		[EBP+4],SS		; OS用のSSを保存
   324 000001DD 8E C3                           		MOV		ES,BX
   325 000001DF 8E DB                           		MOV		DS,BX
   326 000001E1 8E E3                           		MOV		FS,BX
   327 000001E3 8E EB                           		MOV		GS,BX
   328 000001E5                                 ;	以下はRETFでアプリに行かせるためのスタック調整
   329 000001E5 83 C9 03                        		OR		ECX,3			; アプリ用のセグメント番号に3をORする
   330 000001E8 83 CB 03                        		OR		EBX,3			; アプリ用のセグメント番号に3をORする
   331 000001EB 53                              		PUSH	EBX				; アプリのSS
   332 000001EC 52                              		PUSH	EDX				; アプリのESP
   333 000001ED 51                              		PUSH	ECX				; アプリのCS
   334 000001EE 50                              		PUSH	EAX				; アプリのEIP
   335 000001EF CB                              		RETF
   336 000001F0                                 ;	アプリが終了してもここには来ない
